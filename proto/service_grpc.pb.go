// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: service.proto

package grpc_test

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArrayComparerClient is the client API for ArrayComparer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArrayComparerClient interface {
	GetIntArray(ctx context.Context, in *ArrayRequest, opts ...grpc.CallOption) (*IntArrayReply, error)
	GetUserArray(ctx context.Context, in *ArrayRequest, opts ...grpc.CallOption) (*UserArrayReply, error)
}

type arrayComparerClient struct {
	cc grpc.ClientConnInterface
}

func NewArrayComparerClient(cc grpc.ClientConnInterface) ArrayComparerClient {
	return &arrayComparerClient{cc}
}

func (c *arrayComparerClient) GetIntArray(ctx context.Context, in *ArrayRequest, opts ...grpc.CallOption) (*IntArrayReply, error) {
	out := new(IntArrayReply)
	err := c.cc.Invoke(ctx, "/ArrayComparer/GetIntArray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arrayComparerClient) GetUserArray(ctx context.Context, in *ArrayRequest, opts ...grpc.CallOption) (*UserArrayReply, error) {
	out := new(UserArrayReply)
	err := c.cc.Invoke(ctx, "/ArrayComparer/GetUserArray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArrayComparerServer is the server API for ArrayComparer service.
// All implementations must embed UnimplementedArrayComparerServer
// for forward compatibility
type ArrayComparerServer interface {
	GetIntArray(context.Context, *ArrayRequest) (*IntArrayReply, error)
	GetUserArray(context.Context, *ArrayRequest) (*UserArrayReply, error)
	mustEmbedUnimplementedArrayComparerServer()
}

// UnimplementedArrayComparerServer must be embedded to have forward compatible implementations.
type UnimplementedArrayComparerServer struct {
}

func (UnimplementedArrayComparerServer) GetIntArray(context.Context, *ArrayRequest) (*IntArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntArray not implemented")
}
func (UnimplementedArrayComparerServer) GetUserArray(context.Context, *ArrayRequest) (*UserArrayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserArray not implemented")
}
func (UnimplementedArrayComparerServer) mustEmbedUnimplementedArrayComparerServer() {}

// UnsafeArrayComparerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArrayComparerServer will
// result in compilation errors.
type UnsafeArrayComparerServer interface {
	mustEmbedUnimplementedArrayComparerServer()
}

func RegisterArrayComparerServer(s grpc.ServiceRegistrar, srv ArrayComparerServer) {
	s.RegisterService(&ArrayComparer_ServiceDesc, srv)
}

func _ArrayComparer_GetIntArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArrayComparerServer).GetIntArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ArrayComparer/GetIntArray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArrayComparerServer).GetIntArray(ctx, req.(*ArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArrayComparer_GetUserArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArrayComparerServer).GetUserArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ArrayComparer/GetUserArray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArrayComparerServer).GetUserArray(ctx, req.(*ArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArrayComparer_ServiceDesc is the grpc.ServiceDesc for ArrayComparer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArrayComparer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ArrayComparer",
	HandlerType: (*ArrayComparerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIntArray",
			Handler:    _ArrayComparer_GetIntArray_Handler,
		},
		{
			MethodName: "GetUserArray",
			Handler:    _ArrayComparer_GetUserArray_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
